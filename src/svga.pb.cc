// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: svga.proto

#include "svga.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_svga_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioEntity_svga_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_svga_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FrameEntity_svga_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_svga_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Layout_svga_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_svga_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MovieEntity_ImagesEntry_DoNotUse_svga_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_svga_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MovieParams_svga_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_svga_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ShapeEntity_svga_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_svga_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShapeEntity_EllipseArgs_svga_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_svga_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShapeEntity_RectArgs_svga_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_svga_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShapeEntity_ShapeArgs_svga_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_svga_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShapeEntity_ShapeStyle_svga_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_svga_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShapeEntity_ShapeStyle_RGBAColor_svga_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_svga_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpriteEntity_svga_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_svga_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transform_svga_2eproto;
namespace com {
namespace opensource {
namespace svga {
class MovieParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MovieParams> _instance;
} _MovieParams_default_instance_;
class SpriteEntityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpriteEntity> _instance;
} _SpriteEntity_default_instance_;
class AudioEntityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioEntity> _instance;
} _AudioEntity_default_instance_;
class LayoutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Layout> _instance;
} _Layout_default_instance_;
class TransformDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transform> _instance;
} _Transform_default_instance_;
class ShapeEntity_ShapeArgsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShapeEntity_ShapeArgs> _instance;
} _ShapeEntity_ShapeArgs_default_instance_;
class ShapeEntity_RectArgsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShapeEntity_RectArgs> _instance;
} _ShapeEntity_RectArgs_default_instance_;
class ShapeEntity_EllipseArgsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShapeEntity_EllipseArgs> _instance;
} _ShapeEntity_EllipseArgs_default_instance_;
class ShapeEntity_ShapeStyle_RGBAColorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShapeEntity_ShapeStyle_RGBAColor> _instance;
} _ShapeEntity_ShapeStyle_RGBAColor_default_instance_;
class ShapeEntity_ShapeStyleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShapeEntity_ShapeStyle> _instance;
} _ShapeEntity_ShapeStyle_default_instance_;
class ShapeEntityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShapeEntity> _instance;
} _ShapeEntity_default_instance_;
class FrameEntityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameEntity> _instance;
} _FrameEntity_default_instance_;
class MovieEntity_ImagesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MovieEntity_ImagesEntry_DoNotUse> _instance;
} _MovieEntity_ImagesEntry_DoNotUse_default_instance_;
class MovieEntityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MovieEntity> _instance;
} _MovieEntity_default_instance_;
}  // namespace svga
}  // namespace opensource
}  // namespace com
static void InitDefaultsscc_info_AudioEntity_svga_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::opensource::svga::_AudioEntity_default_instance_;
    new (ptr) ::com::opensource::svga::AudioEntity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioEntity_svga_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AudioEntity_svga_2eproto}, {}};

static void InitDefaultsscc_info_FrameEntity_svga_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::opensource::svga::_FrameEntity_default_instance_;
    new (ptr) ::com::opensource::svga::FrameEntity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_FrameEntity_svga_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_FrameEntity_svga_2eproto}, {
      &scc_info_Layout_svga_2eproto.base,
      &scc_info_Transform_svga_2eproto.base,
      &scc_info_ShapeEntity_svga_2eproto.base,}};

static void InitDefaultsscc_info_Layout_svga_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::opensource::svga::_Layout_default_instance_;
    new (ptr) ::com::opensource::svga::Layout();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Layout_svga_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Layout_svga_2eproto}, {}};

static void InitDefaultsscc_info_MovieEntity_svga_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::opensource::svga::_MovieEntity_default_instance_;
    new (ptr) ::com::opensource::svga::MovieEntity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_MovieEntity_svga_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_MovieEntity_svga_2eproto}, {
      &scc_info_MovieParams_svga_2eproto.base,
      &scc_info_MovieEntity_ImagesEntry_DoNotUse_svga_2eproto.base,
      &scc_info_SpriteEntity_svga_2eproto.base,
      &scc_info_AudioEntity_svga_2eproto.base,}};

static void InitDefaultsscc_info_MovieEntity_ImagesEntry_DoNotUse_svga_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::opensource::svga::_MovieEntity_ImagesEntry_DoNotUse_default_instance_;
    new (ptr) ::com::opensource::svga::MovieEntity_ImagesEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MovieEntity_ImagesEntry_DoNotUse_svga_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MovieEntity_ImagesEntry_DoNotUse_svga_2eproto}, {}};

static void InitDefaultsscc_info_MovieParams_svga_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::opensource::svga::_MovieParams_default_instance_;
    new (ptr) ::com::opensource::svga::MovieParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MovieParams_svga_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MovieParams_svga_2eproto}, {}};

static void InitDefaultsscc_info_ShapeEntity_svga_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::opensource::svga::_ShapeEntity_default_instance_;
    new (ptr) ::com::opensource::svga::ShapeEntity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ShapeEntity_svga_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_ShapeEntity_svga_2eproto}, {
      &scc_info_ShapeEntity_ShapeArgs_svga_2eproto.base,
      &scc_info_ShapeEntity_RectArgs_svga_2eproto.base,
      &scc_info_ShapeEntity_EllipseArgs_svga_2eproto.base,
      &scc_info_ShapeEntity_ShapeStyle_svga_2eproto.base,
      &scc_info_Transform_svga_2eproto.base,}};

static void InitDefaultsscc_info_ShapeEntity_EllipseArgs_svga_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::opensource::svga::_ShapeEntity_EllipseArgs_default_instance_;
    new (ptr) ::com::opensource::svga::ShapeEntity_EllipseArgs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShapeEntity_EllipseArgs_svga_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShapeEntity_EllipseArgs_svga_2eproto}, {}};

static void InitDefaultsscc_info_ShapeEntity_RectArgs_svga_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::opensource::svga::_ShapeEntity_RectArgs_default_instance_;
    new (ptr) ::com::opensource::svga::ShapeEntity_RectArgs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShapeEntity_RectArgs_svga_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShapeEntity_RectArgs_svga_2eproto}, {}};

static void InitDefaultsscc_info_ShapeEntity_ShapeArgs_svga_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::opensource::svga::_ShapeEntity_ShapeArgs_default_instance_;
    new (ptr) ::com::opensource::svga::ShapeEntity_ShapeArgs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShapeEntity_ShapeArgs_svga_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShapeEntity_ShapeArgs_svga_2eproto}, {}};

static void InitDefaultsscc_info_ShapeEntity_ShapeStyle_svga_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::opensource::svga::_ShapeEntity_ShapeStyle_default_instance_;
    new (ptr) ::com::opensource::svga::ShapeEntity_ShapeStyle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ShapeEntity_ShapeStyle_svga_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ShapeEntity_ShapeStyle_svga_2eproto}, {
      &scc_info_ShapeEntity_ShapeStyle_RGBAColor_svga_2eproto.base,}};

static void InitDefaultsscc_info_ShapeEntity_ShapeStyle_RGBAColor_svga_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::opensource::svga::_ShapeEntity_ShapeStyle_RGBAColor_default_instance_;
    new (ptr) ::com::opensource::svga::ShapeEntity_ShapeStyle_RGBAColor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShapeEntity_ShapeStyle_RGBAColor_svga_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShapeEntity_ShapeStyle_RGBAColor_svga_2eproto}, {}};

static void InitDefaultsscc_info_SpriteEntity_svga_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::opensource::svga::_SpriteEntity_default_instance_;
    new (ptr) ::com::opensource::svga::SpriteEntity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpriteEntity_svga_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SpriteEntity_svga_2eproto}, {
      &scc_info_FrameEntity_svga_2eproto.base,}};

static void InitDefaultsscc_info_Transform_svga_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::opensource::svga::_Transform_default_instance_;
    new (ptr) ::com::opensource::svga::Transform();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transform_svga_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Transform_svga_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_svga_2eproto[14];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_svga_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_svga_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_svga_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::MovieParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::MovieParams, viewboxwidth_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::MovieParams, viewboxheight_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::MovieParams, fps_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::MovieParams, frames_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::SpriteEntity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::SpriteEntity, imagekey_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::SpriteEntity, frames_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::SpriteEntity, mattekey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::AudioEntity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::AudioEntity, audiokey_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::AudioEntity, startframe_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::AudioEntity, endframe_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::AudioEntity, starttime_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::AudioEntity, totaltime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::Layout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::Layout, x_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::Layout, y_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::Layout, width_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::Layout, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::Transform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::Transform, a_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::Transform, b_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::Transform, c_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::Transform, d_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::Transform, tx_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::Transform, ty_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::ShapeEntity_ShapeArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::ShapeEntity_ShapeArgs, d_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::ShapeEntity_RectArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::ShapeEntity_RectArgs, x_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::ShapeEntity_RectArgs, y_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::ShapeEntity_RectArgs, width_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::ShapeEntity_RectArgs, height_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::ShapeEntity_RectArgs, cornerradius_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::ShapeEntity_EllipseArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::ShapeEntity_EllipseArgs, x_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::ShapeEntity_EllipseArgs, y_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::ShapeEntity_EllipseArgs, radiusx_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::ShapeEntity_EllipseArgs, radiusy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::ShapeEntity_ShapeStyle_RGBAColor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::ShapeEntity_ShapeStyle_RGBAColor, r_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::ShapeEntity_ShapeStyle_RGBAColor, g_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::ShapeEntity_ShapeStyle_RGBAColor, b_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::ShapeEntity_ShapeStyle_RGBAColor, a_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::ShapeEntity_ShapeStyle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::ShapeEntity_ShapeStyle, fill_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::ShapeEntity_ShapeStyle, stroke_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::ShapeEntity_ShapeStyle, strokewidth_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::ShapeEntity_ShapeStyle, linecap_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::ShapeEntity_ShapeStyle, linejoin_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::ShapeEntity_ShapeStyle, miterlimit_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::ShapeEntity_ShapeStyle, linedashi_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::ShapeEntity_ShapeStyle, linedashii_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::ShapeEntity_ShapeStyle, linedashiii_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::ShapeEntity, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::ShapeEntity, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::ShapeEntity, type_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::ShapeEntity, styles_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::ShapeEntity, transform_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::ShapeEntity, args_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::FrameEntity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::FrameEntity, alpha_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::FrameEntity, layout_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::FrameEntity, transform_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::FrameEntity, clippath_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::FrameEntity, shapes_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::MovieEntity_ImagesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::MovieEntity_ImagesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::MovieEntity_ImagesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::MovieEntity_ImagesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::MovieEntity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::MovieEntity, version_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::MovieEntity, params_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::MovieEntity, images_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::MovieEntity, sprites_),
  PROTOBUF_FIELD_OFFSET(::com::opensource::svga::MovieEntity, audios_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::opensource::svga::MovieParams)},
  { 9, -1, sizeof(::com::opensource::svga::SpriteEntity)},
  { 17, -1, sizeof(::com::opensource::svga::AudioEntity)},
  { 27, -1, sizeof(::com::opensource::svga::Layout)},
  { 36, -1, sizeof(::com::opensource::svga::Transform)},
  { 47, -1, sizeof(::com::opensource::svga::ShapeEntity_ShapeArgs)},
  { 53, -1, sizeof(::com::opensource::svga::ShapeEntity_RectArgs)},
  { 63, -1, sizeof(::com::opensource::svga::ShapeEntity_EllipseArgs)},
  { 72, -1, sizeof(::com::opensource::svga::ShapeEntity_ShapeStyle_RGBAColor)},
  { 81, -1, sizeof(::com::opensource::svga::ShapeEntity_ShapeStyle)},
  { 95, -1, sizeof(::com::opensource::svga::ShapeEntity)},
  { 107, -1, sizeof(::com::opensource::svga::FrameEntity)},
  { 117, 124, sizeof(::com::opensource::svga::MovieEntity_ImagesEntry_DoNotUse)},
  { 126, -1, sizeof(::com::opensource::svga::MovieEntity)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::opensource::svga::_MovieParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::opensource::svga::_SpriteEntity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::opensource::svga::_AudioEntity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::opensource::svga::_Layout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::opensource::svga::_Transform_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::opensource::svga::_ShapeEntity_ShapeArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::opensource::svga::_ShapeEntity_RectArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::opensource::svga::_ShapeEntity_EllipseArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::opensource::svga::_ShapeEntity_ShapeStyle_RGBAColor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::opensource::svga::_ShapeEntity_ShapeStyle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::opensource::svga::_ShapeEntity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::opensource::svga::_FrameEntity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::opensource::svga::_MovieEntity_ImagesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::opensource::svga::_MovieEntity_default_instance_),
};

const char descriptor_table_protodef_svga_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nsvga.proto\022\023com.opensource.svga\"W\n\013Mov"
  "ieParams\022\024\n\014viewBoxWidth\030\001 \001(\002\022\025\n\rviewBo"
  "xHeight\030\002 \001(\002\022\013\n\003fps\030\003 \001(\005\022\016\n\006frames\030\004 \001"
  "(\005\"d\n\014SpriteEntity\022\020\n\010imageKey\030\001 \001(\t\0220\n\006"
  "frames\030\002 \003(\0132 .com.opensource.svga.Frame"
  "Entity\022\020\n\010matteKey\030\003 \001(\t\"k\n\013AudioEntity\022"
  "\020\n\010audioKey\030\001 \001(\t\022\022\n\nstartFrame\030\002 \001(\005\022\020\n"
  "\010endFrame\030\003 \001(\005\022\021\n\tstartTime\030\004 \001(\005\022\021\n\tto"
  "talTime\030\005 \001(\005\"=\n\006Layout\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030"
  "\002 \001(\002\022\r\n\005width\030\003 \001(\002\022\016\n\006height\030\004 \001(\002\"O\n\t"
  "Transform\022\t\n\001a\030\001 \001(\002\022\t\n\001b\030\002 \001(\002\022\t\n\001c\030\003 \001"
  "(\002\022\t\n\001d\030\004 \001(\002\022\n\n\002tx\030\005 \001(\002\022\n\n\002ty\030\006 \001(\002\"\272\t"
  "\n\013ShapeEntity\0228\n\004type\030\001 \001(\0162*.com.openso"
  "urce.svga.ShapeEntity.ShapeType\022;\n\005shape"
  "\030\002 \001(\0132*.com.opensource.svga.ShapeEntity"
  ".ShapeArgsH\000\0229\n\004rect\030\003 \001(\0132).com.opensou"
  "rce.svga.ShapeEntity.RectArgsH\000\022\?\n\007ellip"
  "se\030\004 \001(\0132,.com.opensource.svga.ShapeEnti"
  "ty.EllipseArgsH\000\022;\n\006styles\030\n \001(\0132+.com.o"
  "pensource.svga.ShapeEntity.ShapeStyle\0221\n"
  "\ttransform\030\013 \001(\0132\036.com.opensource.svga.T"
  "ransform\032\026\n\tShapeArgs\022\t\n\001d\030\001 \001(\t\032U\n\010Rect"
  "Args\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\r\n\005width\030\003 \001("
  "\002\022\016\n\006height\030\004 \001(\002\022\024\n\014cornerRadius\030\005 \001(\002\032"
  "E\n\013EllipseArgs\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\017\n\007"
  "radiusX\030\003 \001(\002\022\017\n\007radiusY\030\004 \001(\002\032\320\004\n\nShape"
  "Style\022C\n\004fill\030\001 \001(\01325.com.opensource.svg"
  "a.ShapeEntity.ShapeStyle.RGBAColor\022E\n\006st"
  "roke\030\002 \001(\01325.com.opensource.svga.ShapeEn"
  "tity.ShapeStyle.RGBAColor\022\023\n\013strokeWidth"
  "\030\003 \001(\002\022D\n\007lineCap\030\004 \001(\01623.com.opensource"
  ".svga.ShapeEntity.ShapeStyle.LineCap\022F\n\010"
  "lineJoin\030\005 \001(\01624.com.opensource.svga.Sha"
  "peEntity.ShapeStyle.LineJoin\022\022\n\nmiterLim"
  "it\030\006 \001(\002\022\021\n\tlineDashI\030\007 \001(\002\022\022\n\nlineDashI"
  "I\030\010 \001(\002\022\023\n\013lineDashIII\030\t \001(\002\0327\n\tRGBAColo"
  "r\022\t\n\001r\030\001 \001(\002\022\t\n\001g\030\002 \001(\002\022\t\n\001b\030\003 \001(\002\022\t\n\001a\030"
  "\004 \001(\002\"B\n\007LineCap\022\020\n\014LineCap_BUTT\020\000\022\021\n\rLi"
  "neCap_ROUND\020\001\022\022\n\016LineCap_SQUARE\020\002\"F\n\010Lin"
  "eJoin\022\022\n\016LineJoin_MITER\020\000\022\022\n\016LineJoin_RO"
  "UND\020\001\022\022\n\016LineJoin_BEVEL\020\002\"7\n\tShapeType\022\t"
  "\n\005SHAPE\020\000\022\010\n\004RECT\020\001\022\013\n\007ELLIPSE\020\002\022\010\n\004KEEP"
  "\020\003B\006\n\004args\"\300\001\n\013FrameEntity\022\r\n\005alpha\030\001 \001("
  "\002\022+\n\006layout\030\002 \001(\0132\033.com.opensource.svga."
  "Layout\0221\n\ttransform\030\003 \001(\0132\036.com.opensour"
  "ce.svga.Transform\022\020\n\010clipPath\030\004 \001(\t\0220\n\006s"
  "hapes\030\005 \003(\0132 .com.opensource.svga.ShapeE"
  "ntity\"\243\002\n\013MovieEntity\022\017\n\007version\030\001 \001(\t\0220"
  "\n\006params\030\002 \001(\0132 .com.opensource.svga.Mov"
  "ieParams\022<\n\006images\030\003 \003(\0132,.com.opensourc"
  "e.svga.MovieEntity.ImagesEntry\0222\n\007sprite"
  "s\030\004 \003(\0132!.com.opensource.svga.SpriteEnti"
  "ty\0220\n\006audios\030\005 \003(\0132 .com.opensource.svga"
  ".AudioEntity\032-\n\013ImagesEntry\022\013\n\003key\030\001 \001(\t"
  "\022\r\n\005value\030\002 \001(\014:\0028\001B-\n\037com.opensource.sv"
  "gaplayer.proto\242\002\tSVGAProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_svga_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_svga_2eproto_sccs[14] = {
  &scc_info_AudioEntity_svga_2eproto.base,
  &scc_info_FrameEntity_svga_2eproto.base,
  &scc_info_Layout_svga_2eproto.base,
  &scc_info_MovieEntity_svga_2eproto.base,
  &scc_info_MovieEntity_ImagesEntry_DoNotUse_svga_2eproto.base,
  &scc_info_MovieParams_svga_2eproto.base,
  &scc_info_ShapeEntity_svga_2eproto.base,
  &scc_info_ShapeEntity_EllipseArgs_svga_2eproto.base,
  &scc_info_ShapeEntity_RectArgs_svga_2eproto.base,
  &scc_info_ShapeEntity_ShapeArgs_svga_2eproto.base,
  &scc_info_ShapeEntity_ShapeStyle_svga_2eproto.base,
  &scc_info_ShapeEntity_ShapeStyle_RGBAColor_svga_2eproto.base,
  &scc_info_SpriteEntity_svga_2eproto.base,
  &scc_info_Transform_svga_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_svga_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_svga_2eproto = {
  false, false, descriptor_table_protodef_svga_2eproto, "svga.proto", 2234,
  &descriptor_table_svga_2eproto_once, descriptor_table_svga_2eproto_sccs, descriptor_table_svga_2eproto_deps, 14, 0,
  schemas, file_default_instances, TableStruct_svga_2eproto::offsets,
  file_level_metadata_svga_2eproto, 14, file_level_enum_descriptors_svga_2eproto, file_level_service_descriptors_svga_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_svga_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_svga_2eproto)), true);
namespace com {
namespace opensource {
namespace svga {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShapeEntity_ShapeStyle_LineCap_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_svga_2eproto);
  return file_level_enum_descriptors_svga_2eproto[0];
}
bool ShapeEntity_ShapeStyle_LineCap_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ShapeEntity_ShapeStyle_LineCap ShapeEntity_ShapeStyle::LineCap_BUTT;
constexpr ShapeEntity_ShapeStyle_LineCap ShapeEntity_ShapeStyle::LineCap_ROUND;
constexpr ShapeEntity_ShapeStyle_LineCap ShapeEntity_ShapeStyle::LineCap_SQUARE;
constexpr ShapeEntity_ShapeStyle_LineCap ShapeEntity_ShapeStyle::LineCap_MIN;
constexpr ShapeEntity_ShapeStyle_LineCap ShapeEntity_ShapeStyle::LineCap_MAX;
constexpr int ShapeEntity_ShapeStyle::LineCap_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShapeEntity_ShapeStyle_LineJoin_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_svga_2eproto);
  return file_level_enum_descriptors_svga_2eproto[1];
}
bool ShapeEntity_ShapeStyle_LineJoin_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ShapeEntity_ShapeStyle_LineJoin ShapeEntity_ShapeStyle::LineJoin_MITER;
constexpr ShapeEntity_ShapeStyle_LineJoin ShapeEntity_ShapeStyle::LineJoin_ROUND;
constexpr ShapeEntity_ShapeStyle_LineJoin ShapeEntity_ShapeStyle::LineJoin_BEVEL;
constexpr ShapeEntity_ShapeStyle_LineJoin ShapeEntity_ShapeStyle::LineJoin_MIN;
constexpr ShapeEntity_ShapeStyle_LineJoin ShapeEntity_ShapeStyle::LineJoin_MAX;
constexpr int ShapeEntity_ShapeStyle::LineJoin_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShapeEntity_ShapeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_svga_2eproto);
  return file_level_enum_descriptors_svga_2eproto[2];
}
bool ShapeEntity_ShapeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ShapeEntity_ShapeType ShapeEntity::SHAPE;
constexpr ShapeEntity_ShapeType ShapeEntity::RECT;
constexpr ShapeEntity_ShapeType ShapeEntity::ELLIPSE;
constexpr ShapeEntity_ShapeType ShapeEntity::KEEP;
constexpr ShapeEntity_ShapeType ShapeEntity::ShapeType_MIN;
constexpr ShapeEntity_ShapeType ShapeEntity::ShapeType_MAX;
constexpr int ShapeEntity::ShapeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class MovieParams::_Internal {
 public:
};

MovieParams::MovieParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.opensource.svga.MovieParams)
}
MovieParams::MovieParams(const MovieParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&viewboxwidth_, &from.viewboxwidth_,
    static_cast<size_t>(reinterpret_cast<char*>(&frames_) -
    reinterpret_cast<char*>(&viewboxwidth_)) + sizeof(frames_));
  // @@protoc_insertion_point(copy_constructor:com.opensource.svga.MovieParams)
}

void MovieParams::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&viewboxwidth_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&frames_) -
      reinterpret_cast<char*>(&viewboxwidth_)) + sizeof(frames_));
}

MovieParams::~MovieParams() {
  // @@protoc_insertion_point(destructor:com.opensource.svga.MovieParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MovieParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MovieParams::ArenaDtor(void* object) {
  MovieParams* _this = reinterpret_cast< MovieParams* >(object);
  (void)_this;
}
void MovieParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MovieParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MovieParams& MovieParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MovieParams_svga_2eproto.base);
  return *internal_default_instance();
}


void MovieParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.opensource.svga.MovieParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&viewboxwidth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frames_) -
      reinterpret_cast<char*>(&viewboxwidth_)) + sizeof(frames_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MovieParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float viewBoxWidth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          viewboxwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float viewBoxHeight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          viewboxheight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 fps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 frames = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MovieParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.opensource.svga.MovieParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float viewBoxWidth = 1;
  if (!(this->viewboxwidth() <= 0 && this->viewboxwidth() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_viewboxwidth(), target);
  }

  // float viewBoxHeight = 2;
  if (!(this->viewboxheight() <= 0 && this->viewboxheight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_viewboxheight(), target);
  }

  // int32 fps = 3;
  if (this->fps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_fps(), target);
  }

  // int32 frames = 4;
  if (this->frames() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_frames(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.opensource.svga.MovieParams)
  return target;
}

size_t MovieParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.opensource.svga.MovieParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float viewBoxWidth = 1;
  if (!(this->viewboxwidth() <= 0 && this->viewboxwidth() >= 0)) {
    total_size += 1 + 4;
  }

  // float viewBoxHeight = 2;
  if (!(this->viewboxheight() <= 0 && this->viewboxheight() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 fps = 3;
  if (this->fps() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fps());
  }

  // int32 frames = 4;
  if (this->frames() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_frames());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MovieParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.opensource.svga.MovieParams)
  GOOGLE_DCHECK_NE(&from, this);
  const MovieParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MovieParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.opensource.svga.MovieParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.opensource.svga.MovieParams)
    MergeFrom(*source);
  }
}

void MovieParams::MergeFrom(const MovieParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.opensource.svga.MovieParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.viewboxwidth() <= 0 && from.viewboxwidth() >= 0)) {
    _internal_set_viewboxwidth(from._internal_viewboxwidth());
  }
  if (!(from.viewboxheight() <= 0 && from.viewboxheight() >= 0)) {
    _internal_set_viewboxheight(from._internal_viewboxheight());
  }
  if (from.fps() != 0) {
    _internal_set_fps(from._internal_fps());
  }
  if (from.frames() != 0) {
    _internal_set_frames(from._internal_frames());
  }
}

void MovieParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.opensource.svga.MovieParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MovieParams::CopyFrom(const MovieParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.opensource.svga.MovieParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovieParams::IsInitialized() const {
  return true;
}

void MovieParams::InternalSwap(MovieParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MovieParams, frames_)
      + sizeof(MovieParams::frames_)
      - PROTOBUF_FIELD_OFFSET(MovieParams, viewboxwidth_)>(
          reinterpret_cast<char*>(&viewboxwidth_),
          reinterpret_cast<char*>(&other->viewboxwidth_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MovieParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SpriteEntity::_Internal {
 public:
};

SpriteEntity::SpriteEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  frames_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.opensource.svga.SpriteEntity)
}
SpriteEntity::SpriteEntity(const SpriteEntity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      frames_(from.frames_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  imagekey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imagekey().empty()) {
    imagekey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_imagekey(), 
      GetArena());
  }
  mattekey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mattekey().empty()) {
    mattekey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mattekey(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.opensource.svga.SpriteEntity)
}

void SpriteEntity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpriteEntity_svga_2eproto.base);
  imagekey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mattekey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SpriteEntity::~SpriteEntity() {
  // @@protoc_insertion_point(destructor:com.opensource.svga.SpriteEntity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpriteEntity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  imagekey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mattekey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SpriteEntity::ArenaDtor(void* object) {
  SpriteEntity* _this = reinterpret_cast< SpriteEntity* >(object);
  (void)_this;
}
void SpriteEntity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpriteEntity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpriteEntity& SpriteEntity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpriteEntity_svga_2eproto.base);
  return *internal_default_instance();
}


void SpriteEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:com.opensource.svga.SpriteEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frames_.Clear();
  imagekey_.ClearToEmpty();
  mattekey_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpriteEntity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string imageKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_imagekey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.opensource.svga.SpriteEntity.imageKey"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.opensource.svga.FrameEntity frames = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frames(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string matteKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_mattekey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.opensource.svga.SpriteEntity.matteKey"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpriteEntity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.opensource.svga.SpriteEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string imageKey = 1;
  if (this->imagekey().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imagekey().data(), static_cast<int>(this->_internal_imagekey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.opensource.svga.SpriteEntity.imageKey");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_imagekey(), target);
  }

  // repeated .com.opensource.svga.FrameEntity frames = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_frames_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_frames(i), target, stream);
  }

  // string matteKey = 3;
  if (this->mattekey().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mattekey().data(), static_cast<int>(this->_internal_mattekey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.opensource.svga.SpriteEntity.matteKey");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mattekey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.opensource.svga.SpriteEntity)
  return target;
}

size_t SpriteEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.opensource.svga.SpriteEntity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.opensource.svga.FrameEntity frames = 2;
  total_size += 1UL * this->_internal_frames_size();
  for (const auto& msg : this->frames_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string imageKey = 1;
  if (this->imagekey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_imagekey());
  }

  // string matteKey = 3;
  if (this->mattekey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mattekey());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpriteEntity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.opensource.svga.SpriteEntity)
  GOOGLE_DCHECK_NE(&from, this);
  const SpriteEntity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpriteEntity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.opensource.svga.SpriteEntity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.opensource.svga.SpriteEntity)
    MergeFrom(*source);
  }
}

void SpriteEntity::MergeFrom(const SpriteEntity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.opensource.svga.SpriteEntity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frames_.MergeFrom(from.frames_);
  if (from.imagekey().size() > 0) {
    _internal_set_imagekey(from._internal_imagekey());
  }
  if (from.mattekey().size() > 0) {
    _internal_set_mattekey(from._internal_mattekey());
  }
}

void SpriteEntity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.opensource.svga.SpriteEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpriteEntity::CopyFrom(const SpriteEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.opensource.svga.SpriteEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpriteEntity::IsInitialized() const {
  return true;
}

void SpriteEntity::InternalSwap(SpriteEntity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  frames_.InternalSwap(&other->frames_);
  imagekey_.Swap(&other->imagekey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mattekey_.Swap(&other->mattekey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SpriteEntity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AudioEntity::_Internal {
 public:
};

AudioEntity::AudioEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.opensource.svga.AudioEntity)
}
AudioEntity::AudioEntity(const AudioEntity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  audiokey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_audiokey().empty()) {
    audiokey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_audiokey(), 
      GetArena());
  }
  ::memcpy(&startframe_, &from.startframe_,
    static_cast<size_t>(reinterpret_cast<char*>(&totaltime_) -
    reinterpret_cast<char*>(&startframe_)) + sizeof(totaltime_));
  // @@protoc_insertion_point(copy_constructor:com.opensource.svga.AudioEntity)
}

void AudioEntity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AudioEntity_svga_2eproto.base);
  audiokey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&startframe_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&totaltime_) -
      reinterpret_cast<char*>(&startframe_)) + sizeof(totaltime_));
}

AudioEntity::~AudioEntity() {
  // @@protoc_insertion_point(destructor:com.opensource.svga.AudioEntity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AudioEntity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  audiokey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AudioEntity::ArenaDtor(void* object) {
  AudioEntity* _this = reinterpret_cast< AudioEntity* >(object);
  (void)_this;
}
void AudioEntity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioEntity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioEntity& AudioEntity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioEntity_svga_2eproto.base);
  return *internal_default_instance();
}


void AudioEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:com.opensource.svga.AudioEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  audiokey_.ClearToEmpty();
  ::memset(&startframe_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&totaltime_) -
      reinterpret_cast<char*>(&startframe_)) + sizeof(totaltime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioEntity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string audioKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_audiokey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.opensource.svga.AudioEntity.audioKey"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 startFrame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          startframe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 endFrame = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          endframe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 startTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 totalTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          totaltime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioEntity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.opensource.svga.AudioEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string audioKey = 1;
  if (this->audiokey().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_audiokey().data(), static_cast<int>(this->_internal_audiokey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.opensource.svga.AudioEntity.audioKey");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_audiokey(), target);
  }

  // int32 startFrame = 2;
  if (this->startframe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_startframe(), target);
  }

  // int32 endFrame = 3;
  if (this->endframe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_endframe(), target);
  }

  // int32 startTime = 4;
  if (this->starttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_starttime(), target);
  }

  // int32 totalTime = 5;
  if (this->totaltime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_totaltime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.opensource.svga.AudioEntity)
  return target;
}

size_t AudioEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.opensource.svga.AudioEntity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string audioKey = 1;
  if (this->audiokey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_audiokey());
  }

  // int32 startFrame = 2;
  if (this->startframe() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_startframe());
  }

  // int32 endFrame = 3;
  if (this->endframe() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_endframe());
  }

  // int32 startTime = 4;
  if (this->starttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_starttime());
  }

  // int32 totalTime = 5;
  if (this->totaltime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_totaltime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioEntity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.opensource.svga.AudioEntity)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioEntity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioEntity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.opensource.svga.AudioEntity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.opensource.svga.AudioEntity)
    MergeFrom(*source);
  }
}

void AudioEntity::MergeFrom(const AudioEntity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.opensource.svga.AudioEntity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.audiokey().size() > 0) {
    _internal_set_audiokey(from._internal_audiokey());
  }
  if (from.startframe() != 0) {
    _internal_set_startframe(from._internal_startframe());
  }
  if (from.endframe() != 0) {
    _internal_set_endframe(from._internal_endframe());
  }
  if (from.starttime() != 0) {
    _internal_set_starttime(from._internal_starttime());
  }
  if (from.totaltime() != 0) {
    _internal_set_totaltime(from._internal_totaltime());
  }
}

void AudioEntity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.opensource.svga.AudioEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioEntity::CopyFrom(const AudioEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.opensource.svga.AudioEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioEntity::IsInitialized() const {
  return true;
}

void AudioEntity::InternalSwap(AudioEntity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  audiokey_.Swap(&other->audiokey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioEntity, totaltime_)
      + sizeof(AudioEntity::totaltime_)
      - PROTOBUF_FIELD_OFFSET(AudioEntity, startframe_)>(
          reinterpret_cast<char*>(&startframe_),
          reinterpret_cast<char*>(&other->startframe_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioEntity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Layout::_Internal {
 public:
};

Layout::Layout(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.opensource.svga.Layout)
}
Layout::Layout(const Layout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&x_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:com.opensource.svga.Layout)
}

void Layout::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&x_)) + sizeof(height_));
}

Layout::~Layout() {
  // @@protoc_insertion_point(destructor:com.opensource.svga.Layout)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Layout::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Layout::ArenaDtor(void* object) {
  Layout* _this = reinterpret_cast< Layout* >(object);
  (void)_this;
}
void Layout::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Layout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Layout& Layout::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Layout_svga_2eproto.base);
  return *internal_default_instance();
}


void Layout::Clear() {
// @@protoc_insertion_point(message_clear_start:com.opensource.svga.Layout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&x_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Layout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Layout::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.opensource.svga.Layout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float width = 3;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_width(), target);
  }

  // float height = 4;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.opensource.svga.Layout)
  return target;
}

size_t Layout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.opensource.svga.Layout)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float width = 3;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    total_size += 1 + 4;
  }

  // float height = 4;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Layout::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.opensource.svga.Layout)
  GOOGLE_DCHECK_NE(&from, this);
  const Layout* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Layout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.opensource.svga.Layout)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.opensource.svga.Layout)
    MergeFrom(*source);
  }
}

void Layout::MergeFrom(const Layout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.opensource.svga.Layout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.width() <= 0 && from.width() >= 0)) {
    _internal_set_width(from._internal_width());
  }
  if (!(from.height() <= 0 && from.height() >= 0)) {
    _internal_set_height(from._internal_height());
  }
}

void Layout::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.opensource.svga.Layout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Layout::CopyFrom(const Layout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.opensource.svga.Layout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Layout::IsInitialized() const {
  return true;
}

void Layout::InternalSwap(Layout* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Layout, height_)
      + sizeof(Layout::height_)
      - PROTOBUF_FIELD_OFFSET(Layout, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Layout::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Transform::_Internal {
 public:
};

Transform::Transform(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.opensource.svga.Transform)
}
Transform::Transform(const Transform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&a_, &from.a_,
    static_cast<size_t>(reinterpret_cast<char*>(&ty_) -
    reinterpret_cast<char*>(&a_)) + sizeof(ty_));
  // @@protoc_insertion_point(copy_constructor:com.opensource.svga.Transform)
}

void Transform::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&a_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ty_) -
      reinterpret_cast<char*>(&a_)) + sizeof(ty_));
}

Transform::~Transform() {
  // @@protoc_insertion_point(destructor:com.opensource.svga.Transform)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transform::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Transform::ArenaDtor(void* object) {
  Transform* _this = reinterpret_cast< Transform* >(object);
  (void)_this;
}
void Transform::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transform& Transform::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transform_svga_2eproto.base);
  return *internal_default_instance();
}


void Transform::Clear() {
// @@protoc_insertion_point(message_clear_start:com.opensource.svga.Transform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ty_) -
      reinterpret_cast<char*>(&a_)) + sizeof(ty_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transform::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float b = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float c = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          c_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float d = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          d_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float tx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          tx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ty = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          ty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transform::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.opensource.svga.Transform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float a = 1;
  if (!(this->a() <= 0 && this->a() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_a(), target);
  }

  // float b = 2;
  if (!(this->b() <= 0 && this->b() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_b(), target);
  }

  // float c = 3;
  if (!(this->c() <= 0 && this->c() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_c(), target);
  }

  // float d = 4;
  if (!(this->d() <= 0 && this->d() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_d(), target);
  }

  // float tx = 5;
  if (!(this->tx() <= 0 && this->tx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_tx(), target);
  }

  // float ty = 6;
  if (!(this->ty() <= 0 && this->ty() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_ty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.opensource.svga.Transform)
  return target;
}

size_t Transform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.opensource.svga.Transform)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float a = 1;
  if (!(this->a() <= 0 && this->a() >= 0)) {
    total_size += 1 + 4;
  }

  // float b = 2;
  if (!(this->b() <= 0 && this->b() >= 0)) {
    total_size += 1 + 4;
  }

  // float c = 3;
  if (!(this->c() <= 0 && this->c() >= 0)) {
    total_size += 1 + 4;
  }

  // float d = 4;
  if (!(this->d() <= 0 && this->d() >= 0)) {
    total_size += 1 + 4;
  }

  // float tx = 5;
  if (!(this->tx() <= 0 && this->tx() >= 0)) {
    total_size += 1 + 4;
  }

  // float ty = 6;
  if (!(this->ty() <= 0 && this->ty() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transform::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.opensource.svga.Transform)
  GOOGLE_DCHECK_NE(&from, this);
  const Transform* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transform>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.opensource.svga.Transform)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.opensource.svga.Transform)
    MergeFrom(*source);
  }
}

void Transform::MergeFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.opensource.svga.Transform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.a() <= 0 && from.a() >= 0)) {
    _internal_set_a(from._internal_a());
  }
  if (!(from.b() <= 0 && from.b() >= 0)) {
    _internal_set_b(from._internal_b());
  }
  if (!(from.c() <= 0 && from.c() >= 0)) {
    _internal_set_c(from._internal_c());
  }
  if (!(from.d() <= 0 && from.d() >= 0)) {
    _internal_set_d(from._internal_d());
  }
  if (!(from.tx() <= 0 && from.tx() >= 0)) {
    _internal_set_tx(from._internal_tx());
  }
  if (!(from.ty() <= 0 && from.ty() >= 0)) {
    _internal_set_ty(from._internal_ty());
  }
}

void Transform::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.opensource.svga.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transform::CopyFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.opensource.svga.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transform::IsInitialized() const {
  return true;
}

void Transform::InternalSwap(Transform* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transform, ty_)
      + sizeof(Transform::ty_)
      - PROTOBUF_FIELD_OFFSET(Transform, a_)>(
          reinterpret_cast<char*>(&a_),
          reinterpret_cast<char*>(&other->a_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transform::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ShapeEntity_ShapeArgs::_Internal {
 public:
};

ShapeEntity_ShapeArgs::ShapeEntity_ShapeArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.opensource.svga.ShapeEntity.ShapeArgs)
}
ShapeEntity_ShapeArgs::ShapeEntity_ShapeArgs(const ShapeEntity_ShapeArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  d_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_d().empty()) {
    d_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_d(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:com.opensource.svga.ShapeEntity.ShapeArgs)
}

void ShapeEntity_ShapeArgs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShapeEntity_ShapeArgs_svga_2eproto.base);
  d_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ShapeEntity_ShapeArgs::~ShapeEntity_ShapeArgs() {
  // @@protoc_insertion_point(destructor:com.opensource.svga.ShapeEntity.ShapeArgs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShapeEntity_ShapeArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  d_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShapeEntity_ShapeArgs::ArenaDtor(void* object) {
  ShapeEntity_ShapeArgs* _this = reinterpret_cast< ShapeEntity_ShapeArgs* >(object);
  (void)_this;
}
void ShapeEntity_ShapeArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShapeEntity_ShapeArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShapeEntity_ShapeArgs& ShapeEntity_ShapeArgs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShapeEntity_ShapeArgs_svga_2eproto.base);
  return *internal_default_instance();
}


void ShapeEntity_ShapeArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:com.opensource.svga.ShapeEntity.ShapeArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  d_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShapeEntity_ShapeArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string d = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_d();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.opensource.svga.ShapeEntity.ShapeArgs.d"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShapeEntity_ShapeArgs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.opensource.svga.ShapeEntity.ShapeArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string d = 1;
  if (this->d().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_d().data(), static_cast<int>(this->_internal_d().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.opensource.svga.ShapeEntity.ShapeArgs.d");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_d(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.opensource.svga.ShapeEntity.ShapeArgs)
  return target;
}

size_t ShapeEntity_ShapeArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.opensource.svga.ShapeEntity.ShapeArgs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string d = 1;
  if (this->d().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_d());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShapeEntity_ShapeArgs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.opensource.svga.ShapeEntity.ShapeArgs)
  GOOGLE_DCHECK_NE(&from, this);
  const ShapeEntity_ShapeArgs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShapeEntity_ShapeArgs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.opensource.svga.ShapeEntity.ShapeArgs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.opensource.svga.ShapeEntity.ShapeArgs)
    MergeFrom(*source);
  }
}

void ShapeEntity_ShapeArgs::MergeFrom(const ShapeEntity_ShapeArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.opensource.svga.ShapeEntity.ShapeArgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.d().size() > 0) {
    _internal_set_d(from._internal_d());
  }
}

void ShapeEntity_ShapeArgs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.opensource.svga.ShapeEntity.ShapeArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapeEntity_ShapeArgs::CopyFrom(const ShapeEntity_ShapeArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.opensource.svga.ShapeEntity.ShapeArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeEntity_ShapeArgs::IsInitialized() const {
  return true;
}

void ShapeEntity_ShapeArgs::InternalSwap(ShapeEntity_ShapeArgs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  d_.Swap(&other->d_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ShapeEntity_ShapeArgs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ShapeEntity_RectArgs::_Internal {
 public:
};

ShapeEntity_RectArgs::ShapeEntity_RectArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.opensource.svga.ShapeEntity.RectArgs)
}
ShapeEntity_RectArgs::ShapeEntity_RectArgs(const ShapeEntity_RectArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&cornerradius_) -
    reinterpret_cast<char*>(&x_)) + sizeof(cornerradius_));
  // @@protoc_insertion_point(copy_constructor:com.opensource.svga.ShapeEntity.RectArgs)
}

void ShapeEntity_RectArgs::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&cornerradius_) -
      reinterpret_cast<char*>(&x_)) + sizeof(cornerradius_));
}

ShapeEntity_RectArgs::~ShapeEntity_RectArgs() {
  // @@protoc_insertion_point(destructor:com.opensource.svga.ShapeEntity.RectArgs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShapeEntity_RectArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ShapeEntity_RectArgs::ArenaDtor(void* object) {
  ShapeEntity_RectArgs* _this = reinterpret_cast< ShapeEntity_RectArgs* >(object);
  (void)_this;
}
void ShapeEntity_RectArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShapeEntity_RectArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShapeEntity_RectArgs& ShapeEntity_RectArgs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShapeEntity_RectArgs_svga_2eproto.base);
  return *internal_default_instance();
}


void ShapeEntity_RectArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:com.opensource.svga.ShapeEntity.RectArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cornerradius_) -
      reinterpret_cast<char*>(&x_)) + sizeof(cornerradius_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShapeEntity_RectArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float cornerRadius = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          cornerradius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShapeEntity_RectArgs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.opensource.svga.ShapeEntity.RectArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float width = 3;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_width(), target);
  }

  // float height = 4;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_height(), target);
  }

  // float cornerRadius = 5;
  if (!(this->cornerradius() <= 0 && this->cornerradius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_cornerradius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.opensource.svga.ShapeEntity.RectArgs)
  return target;
}

size_t ShapeEntity_RectArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.opensource.svga.ShapeEntity.RectArgs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float width = 3;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    total_size += 1 + 4;
  }

  // float height = 4;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    total_size += 1 + 4;
  }

  // float cornerRadius = 5;
  if (!(this->cornerradius() <= 0 && this->cornerradius() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShapeEntity_RectArgs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.opensource.svga.ShapeEntity.RectArgs)
  GOOGLE_DCHECK_NE(&from, this);
  const ShapeEntity_RectArgs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShapeEntity_RectArgs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.opensource.svga.ShapeEntity.RectArgs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.opensource.svga.ShapeEntity.RectArgs)
    MergeFrom(*source);
  }
}

void ShapeEntity_RectArgs::MergeFrom(const ShapeEntity_RectArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.opensource.svga.ShapeEntity.RectArgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.width() <= 0 && from.width() >= 0)) {
    _internal_set_width(from._internal_width());
  }
  if (!(from.height() <= 0 && from.height() >= 0)) {
    _internal_set_height(from._internal_height());
  }
  if (!(from.cornerradius() <= 0 && from.cornerradius() >= 0)) {
    _internal_set_cornerradius(from._internal_cornerradius());
  }
}

void ShapeEntity_RectArgs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.opensource.svga.ShapeEntity.RectArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapeEntity_RectArgs::CopyFrom(const ShapeEntity_RectArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.opensource.svga.ShapeEntity.RectArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeEntity_RectArgs::IsInitialized() const {
  return true;
}

void ShapeEntity_RectArgs::InternalSwap(ShapeEntity_RectArgs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShapeEntity_RectArgs, cornerradius_)
      + sizeof(ShapeEntity_RectArgs::cornerradius_)
      - PROTOBUF_FIELD_OFFSET(ShapeEntity_RectArgs, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShapeEntity_RectArgs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ShapeEntity_EllipseArgs::_Internal {
 public:
};

ShapeEntity_EllipseArgs::ShapeEntity_EllipseArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.opensource.svga.ShapeEntity.EllipseArgs)
}
ShapeEntity_EllipseArgs::ShapeEntity_EllipseArgs(const ShapeEntity_EllipseArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&radiusy_) -
    reinterpret_cast<char*>(&x_)) + sizeof(radiusy_));
  // @@protoc_insertion_point(copy_constructor:com.opensource.svga.ShapeEntity.EllipseArgs)
}

void ShapeEntity_EllipseArgs::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&radiusy_) -
      reinterpret_cast<char*>(&x_)) + sizeof(radiusy_));
}

ShapeEntity_EllipseArgs::~ShapeEntity_EllipseArgs() {
  // @@protoc_insertion_point(destructor:com.opensource.svga.ShapeEntity.EllipseArgs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShapeEntity_EllipseArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ShapeEntity_EllipseArgs::ArenaDtor(void* object) {
  ShapeEntity_EllipseArgs* _this = reinterpret_cast< ShapeEntity_EllipseArgs* >(object);
  (void)_this;
}
void ShapeEntity_EllipseArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShapeEntity_EllipseArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShapeEntity_EllipseArgs& ShapeEntity_EllipseArgs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShapeEntity_EllipseArgs_svga_2eproto.base);
  return *internal_default_instance();
}


void ShapeEntity_EllipseArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:com.opensource.svga.ShapeEntity.EllipseArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radiusy_) -
      reinterpret_cast<char*>(&x_)) + sizeof(radiusy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShapeEntity_EllipseArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float radiusX = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          radiusx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float radiusY = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          radiusy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShapeEntity_EllipseArgs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.opensource.svga.ShapeEntity.EllipseArgs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float radiusX = 3;
  if (!(this->radiusx() <= 0 && this->radiusx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_radiusx(), target);
  }

  // float radiusY = 4;
  if (!(this->radiusy() <= 0 && this->radiusy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_radiusy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.opensource.svga.ShapeEntity.EllipseArgs)
  return target;
}

size_t ShapeEntity_EllipseArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.opensource.svga.ShapeEntity.EllipseArgs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float radiusX = 3;
  if (!(this->radiusx() <= 0 && this->radiusx() >= 0)) {
    total_size += 1 + 4;
  }

  // float radiusY = 4;
  if (!(this->radiusy() <= 0 && this->radiusy() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShapeEntity_EllipseArgs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.opensource.svga.ShapeEntity.EllipseArgs)
  GOOGLE_DCHECK_NE(&from, this);
  const ShapeEntity_EllipseArgs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShapeEntity_EllipseArgs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.opensource.svga.ShapeEntity.EllipseArgs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.opensource.svga.ShapeEntity.EllipseArgs)
    MergeFrom(*source);
  }
}

void ShapeEntity_EllipseArgs::MergeFrom(const ShapeEntity_EllipseArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.opensource.svga.ShapeEntity.EllipseArgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.radiusx() <= 0 && from.radiusx() >= 0)) {
    _internal_set_radiusx(from._internal_radiusx());
  }
  if (!(from.radiusy() <= 0 && from.radiusy() >= 0)) {
    _internal_set_radiusy(from._internal_radiusy());
  }
}

void ShapeEntity_EllipseArgs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.opensource.svga.ShapeEntity.EllipseArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapeEntity_EllipseArgs::CopyFrom(const ShapeEntity_EllipseArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.opensource.svga.ShapeEntity.EllipseArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeEntity_EllipseArgs::IsInitialized() const {
  return true;
}

void ShapeEntity_EllipseArgs::InternalSwap(ShapeEntity_EllipseArgs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShapeEntity_EllipseArgs, radiusy_)
      + sizeof(ShapeEntity_EllipseArgs::radiusy_)
      - PROTOBUF_FIELD_OFFSET(ShapeEntity_EllipseArgs, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShapeEntity_EllipseArgs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ShapeEntity_ShapeStyle_RGBAColor::_Internal {
 public:
};

ShapeEntity_ShapeStyle_RGBAColor::ShapeEntity_ShapeStyle_RGBAColor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor)
}
ShapeEntity_ShapeStyle_RGBAColor::ShapeEntity_ShapeStyle_RGBAColor(const ShapeEntity_ShapeStyle_RGBAColor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&a_) -
    reinterpret_cast<char*>(&r_)) + sizeof(a_));
  // @@protoc_insertion_point(copy_constructor:com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor)
}

void ShapeEntity_ShapeStyle_RGBAColor::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&r_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&a_) -
      reinterpret_cast<char*>(&r_)) + sizeof(a_));
}

ShapeEntity_ShapeStyle_RGBAColor::~ShapeEntity_ShapeStyle_RGBAColor() {
  // @@protoc_insertion_point(destructor:com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShapeEntity_ShapeStyle_RGBAColor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ShapeEntity_ShapeStyle_RGBAColor::ArenaDtor(void* object) {
  ShapeEntity_ShapeStyle_RGBAColor* _this = reinterpret_cast< ShapeEntity_ShapeStyle_RGBAColor* >(object);
  (void)_this;
}
void ShapeEntity_ShapeStyle_RGBAColor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShapeEntity_ShapeStyle_RGBAColor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShapeEntity_ShapeStyle_RGBAColor& ShapeEntity_ShapeStyle_RGBAColor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShapeEntity_ShapeStyle_RGBAColor_svga_2eproto.base);
  return *internal_default_instance();
}


void ShapeEntity_ShapeStyle_RGBAColor::Clear() {
// @@protoc_insertion_point(message_clear_start:com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a_) -
      reinterpret_cast<char*>(&r_)) + sizeof(a_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShapeEntity_ShapeStyle_RGBAColor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float g = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float b = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float a = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShapeEntity_ShapeStyle_RGBAColor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float r = 1;
  if (!(this->r() <= 0 && this->r() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_r(), target);
  }

  // float g = 2;
  if (!(this->g() <= 0 && this->g() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_g(), target);
  }

  // float b = 3;
  if (!(this->b() <= 0 && this->b() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_b(), target);
  }

  // float a = 4;
  if (!(this->a() <= 0 && this->a() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor)
  return target;
}

size_t ShapeEntity_ShapeStyle_RGBAColor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float r = 1;
  if (!(this->r() <= 0 && this->r() >= 0)) {
    total_size += 1 + 4;
  }

  // float g = 2;
  if (!(this->g() <= 0 && this->g() >= 0)) {
    total_size += 1 + 4;
  }

  // float b = 3;
  if (!(this->b() <= 0 && this->b() >= 0)) {
    total_size += 1 + 4;
  }

  // float a = 4;
  if (!(this->a() <= 0 && this->a() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShapeEntity_ShapeStyle_RGBAColor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor)
  GOOGLE_DCHECK_NE(&from, this);
  const ShapeEntity_ShapeStyle_RGBAColor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShapeEntity_ShapeStyle_RGBAColor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor)
    MergeFrom(*source);
  }
}

void ShapeEntity_ShapeStyle_RGBAColor::MergeFrom(const ShapeEntity_ShapeStyle_RGBAColor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.r() <= 0 && from.r() >= 0)) {
    _internal_set_r(from._internal_r());
  }
  if (!(from.g() <= 0 && from.g() >= 0)) {
    _internal_set_g(from._internal_g());
  }
  if (!(from.b() <= 0 && from.b() >= 0)) {
    _internal_set_b(from._internal_b());
  }
  if (!(from.a() <= 0 && from.a() >= 0)) {
    _internal_set_a(from._internal_a());
  }
}

void ShapeEntity_ShapeStyle_RGBAColor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapeEntity_ShapeStyle_RGBAColor::CopyFrom(const ShapeEntity_ShapeStyle_RGBAColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeEntity_ShapeStyle_RGBAColor::IsInitialized() const {
  return true;
}

void ShapeEntity_ShapeStyle_RGBAColor::InternalSwap(ShapeEntity_ShapeStyle_RGBAColor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShapeEntity_ShapeStyle_RGBAColor, a_)
      + sizeof(ShapeEntity_ShapeStyle_RGBAColor::a_)
      - PROTOBUF_FIELD_OFFSET(ShapeEntity_ShapeStyle_RGBAColor, r_)>(
          reinterpret_cast<char*>(&r_),
          reinterpret_cast<char*>(&other->r_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShapeEntity_ShapeStyle_RGBAColor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ShapeEntity_ShapeStyle::_Internal {
 public:
  static const ::com::opensource::svga::ShapeEntity_ShapeStyle_RGBAColor& fill(const ShapeEntity_ShapeStyle* msg);
  static const ::com::opensource::svga::ShapeEntity_ShapeStyle_RGBAColor& stroke(const ShapeEntity_ShapeStyle* msg);
};

const ::com::opensource::svga::ShapeEntity_ShapeStyle_RGBAColor&
ShapeEntity_ShapeStyle::_Internal::fill(const ShapeEntity_ShapeStyle* msg) {
  return *msg->fill_;
}
const ::com::opensource::svga::ShapeEntity_ShapeStyle_RGBAColor&
ShapeEntity_ShapeStyle::_Internal::stroke(const ShapeEntity_ShapeStyle* msg) {
  return *msg->stroke_;
}
ShapeEntity_ShapeStyle::ShapeEntity_ShapeStyle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.opensource.svga.ShapeEntity.ShapeStyle)
}
ShapeEntity_ShapeStyle::ShapeEntity_ShapeStyle(const ShapeEntity_ShapeStyle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fill()) {
    fill_ = new ::com::opensource::svga::ShapeEntity_ShapeStyle_RGBAColor(*from.fill_);
  } else {
    fill_ = nullptr;
  }
  if (from._internal_has_stroke()) {
    stroke_ = new ::com::opensource::svga::ShapeEntity_ShapeStyle_RGBAColor(*from.stroke_);
  } else {
    stroke_ = nullptr;
  }
  ::memcpy(&strokewidth_, &from.strokewidth_,
    static_cast<size_t>(reinterpret_cast<char*>(&linedashiii_) -
    reinterpret_cast<char*>(&strokewidth_)) + sizeof(linedashiii_));
  // @@protoc_insertion_point(copy_constructor:com.opensource.svga.ShapeEntity.ShapeStyle)
}

void ShapeEntity_ShapeStyle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShapeEntity_ShapeStyle_svga_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&fill_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&linedashiii_) -
      reinterpret_cast<char*>(&fill_)) + sizeof(linedashiii_));
}

ShapeEntity_ShapeStyle::~ShapeEntity_ShapeStyle() {
  // @@protoc_insertion_point(destructor:com.opensource.svga.ShapeEntity.ShapeStyle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShapeEntity_ShapeStyle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete fill_;
  if (this != internal_default_instance()) delete stroke_;
}

void ShapeEntity_ShapeStyle::ArenaDtor(void* object) {
  ShapeEntity_ShapeStyle* _this = reinterpret_cast< ShapeEntity_ShapeStyle* >(object);
  (void)_this;
}
void ShapeEntity_ShapeStyle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShapeEntity_ShapeStyle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShapeEntity_ShapeStyle& ShapeEntity_ShapeStyle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShapeEntity_ShapeStyle_svga_2eproto.base);
  return *internal_default_instance();
}


void ShapeEntity_ShapeStyle::Clear() {
// @@protoc_insertion_point(message_clear_start:com.opensource.svga.ShapeEntity.ShapeStyle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && fill_ != nullptr) {
    delete fill_;
  }
  fill_ = nullptr;
  if (GetArena() == nullptr && stroke_ != nullptr) {
    delete stroke_;
  }
  stroke_ = nullptr;
  ::memset(&strokewidth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&linedashiii_) -
      reinterpret_cast<char*>(&strokewidth_)) + sizeof(linedashiii_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShapeEntity_ShapeStyle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor fill = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor stroke = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stroke(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float strokeWidth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          strokewidth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .com.opensource.svga.ShapeEntity.ShapeStyle.LineCap lineCap = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_linecap(static_cast<::com::opensource::svga::ShapeEntity_ShapeStyle_LineCap>(val));
        } else goto handle_unusual;
        continue;
      // .com.opensource.svga.ShapeEntity.ShapeStyle.LineJoin lineJoin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_linejoin(static_cast<::com::opensource::svga::ShapeEntity_ShapeStyle_LineJoin>(val));
        } else goto handle_unusual;
        continue;
      // float miterLimit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          miterlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float lineDashI = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          linedashi_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float lineDashII = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          linedashii_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float lineDashIII = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          linedashiii_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShapeEntity_ShapeStyle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.opensource.svga.ShapeEntity.ShapeStyle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor fill = 1;
  if (this->has_fill()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::fill(this), target, stream);
  }

  // .com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor stroke = 2;
  if (this->has_stroke()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stroke(this), target, stream);
  }

  // float strokeWidth = 3;
  if (!(this->strokewidth() <= 0 && this->strokewidth() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_strokewidth(), target);
  }

  // .com.opensource.svga.ShapeEntity.ShapeStyle.LineCap lineCap = 4;
  if (this->linecap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_linecap(), target);
  }

  // .com.opensource.svga.ShapeEntity.ShapeStyle.LineJoin lineJoin = 5;
  if (this->linejoin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_linejoin(), target);
  }

  // float miterLimit = 6;
  if (!(this->miterlimit() <= 0 && this->miterlimit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_miterlimit(), target);
  }

  // float lineDashI = 7;
  if (!(this->linedashi() <= 0 && this->linedashi() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_linedashi(), target);
  }

  // float lineDashII = 8;
  if (!(this->linedashii() <= 0 && this->linedashii() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_linedashii(), target);
  }

  // float lineDashIII = 9;
  if (!(this->linedashiii() <= 0 && this->linedashiii() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_linedashiii(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.opensource.svga.ShapeEntity.ShapeStyle)
  return target;
}

size_t ShapeEntity_ShapeStyle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.opensource.svga.ShapeEntity.ShapeStyle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor fill = 1;
  if (this->has_fill()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fill_);
  }

  // .com.opensource.svga.ShapeEntity.ShapeStyle.RGBAColor stroke = 2;
  if (this->has_stroke()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stroke_);
  }

  // float strokeWidth = 3;
  if (!(this->strokewidth() <= 0 && this->strokewidth() >= 0)) {
    total_size += 1 + 4;
  }

  // .com.opensource.svga.ShapeEntity.ShapeStyle.LineCap lineCap = 4;
  if (this->linecap() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_linecap());
  }

  // .com.opensource.svga.ShapeEntity.ShapeStyle.LineJoin lineJoin = 5;
  if (this->linejoin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_linejoin());
  }

  // float miterLimit = 6;
  if (!(this->miterlimit() <= 0 && this->miterlimit() >= 0)) {
    total_size += 1 + 4;
  }

  // float lineDashI = 7;
  if (!(this->linedashi() <= 0 && this->linedashi() >= 0)) {
    total_size += 1 + 4;
  }

  // float lineDashII = 8;
  if (!(this->linedashii() <= 0 && this->linedashii() >= 0)) {
    total_size += 1 + 4;
  }

  // float lineDashIII = 9;
  if (!(this->linedashiii() <= 0 && this->linedashiii() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShapeEntity_ShapeStyle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.opensource.svga.ShapeEntity.ShapeStyle)
  GOOGLE_DCHECK_NE(&from, this);
  const ShapeEntity_ShapeStyle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShapeEntity_ShapeStyle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.opensource.svga.ShapeEntity.ShapeStyle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.opensource.svga.ShapeEntity.ShapeStyle)
    MergeFrom(*source);
  }
}

void ShapeEntity_ShapeStyle::MergeFrom(const ShapeEntity_ShapeStyle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.opensource.svga.ShapeEntity.ShapeStyle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fill()) {
    _internal_mutable_fill()->::com::opensource::svga::ShapeEntity_ShapeStyle_RGBAColor::MergeFrom(from._internal_fill());
  }
  if (from.has_stroke()) {
    _internal_mutable_stroke()->::com::opensource::svga::ShapeEntity_ShapeStyle_RGBAColor::MergeFrom(from._internal_stroke());
  }
  if (!(from.strokewidth() <= 0 && from.strokewidth() >= 0)) {
    _internal_set_strokewidth(from._internal_strokewidth());
  }
  if (from.linecap() != 0) {
    _internal_set_linecap(from._internal_linecap());
  }
  if (from.linejoin() != 0) {
    _internal_set_linejoin(from._internal_linejoin());
  }
  if (!(from.miterlimit() <= 0 && from.miterlimit() >= 0)) {
    _internal_set_miterlimit(from._internal_miterlimit());
  }
  if (!(from.linedashi() <= 0 && from.linedashi() >= 0)) {
    _internal_set_linedashi(from._internal_linedashi());
  }
  if (!(from.linedashii() <= 0 && from.linedashii() >= 0)) {
    _internal_set_linedashii(from._internal_linedashii());
  }
  if (!(from.linedashiii() <= 0 && from.linedashiii() >= 0)) {
    _internal_set_linedashiii(from._internal_linedashiii());
  }
}

void ShapeEntity_ShapeStyle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.opensource.svga.ShapeEntity.ShapeStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapeEntity_ShapeStyle::CopyFrom(const ShapeEntity_ShapeStyle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.opensource.svga.ShapeEntity.ShapeStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeEntity_ShapeStyle::IsInitialized() const {
  return true;
}

void ShapeEntity_ShapeStyle::InternalSwap(ShapeEntity_ShapeStyle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShapeEntity_ShapeStyle, linedashiii_)
      + sizeof(ShapeEntity_ShapeStyle::linedashiii_)
      - PROTOBUF_FIELD_OFFSET(ShapeEntity_ShapeStyle, fill_)>(
          reinterpret_cast<char*>(&fill_),
          reinterpret_cast<char*>(&other->fill_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShapeEntity_ShapeStyle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ShapeEntity::_Internal {
 public:
  static const ::com::opensource::svga::ShapeEntity_ShapeArgs& shape(const ShapeEntity* msg);
  static const ::com::opensource::svga::ShapeEntity_RectArgs& rect(const ShapeEntity* msg);
  static const ::com::opensource::svga::ShapeEntity_EllipseArgs& ellipse(const ShapeEntity* msg);
  static const ::com::opensource::svga::ShapeEntity_ShapeStyle& styles(const ShapeEntity* msg);
  static const ::com::opensource::svga::Transform& transform(const ShapeEntity* msg);
};

const ::com::opensource::svga::ShapeEntity_ShapeArgs&
ShapeEntity::_Internal::shape(const ShapeEntity* msg) {
  return *msg->args_.shape_;
}
const ::com::opensource::svga::ShapeEntity_RectArgs&
ShapeEntity::_Internal::rect(const ShapeEntity* msg) {
  return *msg->args_.rect_;
}
const ::com::opensource::svga::ShapeEntity_EllipseArgs&
ShapeEntity::_Internal::ellipse(const ShapeEntity* msg) {
  return *msg->args_.ellipse_;
}
const ::com::opensource::svga::ShapeEntity_ShapeStyle&
ShapeEntity::_Internal::styles(const ShapeEntity* msg) {
  return *msg->styles_;
}
const ::com::opensource::svga::Transform&
ShapeEntity::_Internal::transform(const ShapeEntity* msg) {
  return *msg->transform_;
}
void ShapeEntity::set_allocated_shape(::com::opensource::svga::ShapeEntity_ShapeArgs* shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_args();
  if (shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shape);
    if (message_arena != submessage_arena) {
      shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    set_has_shape();
    args_.shape_ = shape;
  }
  // @@protoc_insertion_point(field_set_allocated:com.opensource.svga.ShapeEntity.shape)
}
void ShapeEntity::set_allocated_rect(::com::opensource::svga::ShapeEntity_RectArgs* rect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_args();
  if (rect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rect);
    if (message_arena != submessage_arena) {
      rect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rect, submessage_arena);
    }
    set_has_rect();
    args_.rect_ = rect;
  }
  // @@protoc_insertion_point(field_set_allocated:com.opensource.svga.ShapeEntity.rect)
}
void ShapeEntity::set_allocated_ellipse(::com::opensource::svga::ShapeEntity_EllipseArgs* ellipse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_args();
  if (ellipse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ellipse);
    if (message_arena != submessage_arena) {
      ellipse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ellipse, submessage_arena);
    }
    set_has_ellipse();
    args_.ellipse_ = ellipse;
  }
  // @@protoc_insertion_point(field_set_allocated:com.opensource.svga.ShapeEntity.ellipse)
}
ShapeEntity::ShapeEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.opensource.svga.ShapeEntity)
}
ShapeEntity::ShapeEntity(const ShapeEntity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_styles()) {
    styles_ = new ::com::opensource::svga::ShapeEntity_ShapeStyle(*from.styles_);
  } else {
    styles_ = nullptr;
  }
  if (from._internal_has_transform()) {
    transform_ = new ::com::opensource::svga::Transform(*from.transform_);
  } else {
    transform_ = nullptr;
  }
  type_ = from.type_;
  clear_has_args();
  switch (from.args_case()) {
    case kShape: {
      _internal_mutable_shape()->::com::opensource::svga::ShapeEntity_ShapeArgs::MergeFrom(from._internal_shape());
      break;
    }
    case kRect: {
      _internal_mutable_rect()->::com::opensource::svga::ShapeEntity_RectArgs::MergeFrom(from._internal_rect());
      break;
    }
    case kEllipse: {
      _internal_mutable_ellipse()->::com::opensource::svga::ShapeEntity_EllipseArgs::MergeFrom(from._internal_ellipse());
      break;
    }
    case ARGS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.opensource.svga.ShapeEntity)
}

void ShapeEntity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShapeEntity_svga_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&styles_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&styles_)) + sizeof(type_));
  clear_has_args();
}

ShapeEntity::~ShapeEntity() {
  // @@protoc_insertion_point(destructor:com.opensource.svga.ShapeEntity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShapeEntity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete styles_;
  if (this != internal_default_instance()) delete transform_;
  if (has_args()) {
    clear_args();
  }
}

void ShapeEntity::ArenaDtor(void* object) {
  ShapeEntity* _this = reinterpret_cast< ShapeEntity* >(object);
  (void)_this;
}
void ShapeEntity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShapeEntity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShapeEntity& ShapeEntity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShapeEntity_svga_2eproto.base);
  return *internal_default_instance();
}


void ShapeEntity::clear_args() {
// @@protoc_insertion_point(one_of_clear_start:com.opensource.svga.ShapeEntity)
  switch (args_case()) {
    case kShape: {
      if (GetArena() == nullptr) {
        delete args_.shape_;
      }
      break;
    }
    case kRect: {
      if (GetArena() == nullptr) {
        delete args_.rect_;
      }
      break;
    }
    case kEllipse: {
      if (GetArena() == nullptr) {
        delete args_.ellipse_;
      }
      break;
    }
    case ARGS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ARGS_NOT_SET;
}


void ShapeEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:com.opensource.svga.ShapeEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && styles_ != nullptr) {
    delete styles_;
  }
  styles_ = nullptr;
  if (GetArena() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
  type_ = 0;
  clear_args();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShapeEntity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.opensource.svga.ShapeEntity.ShapeType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::com::opensource::svga::ShapeEntity_ShapeType>(val));
        } else goto handle_unusual;
        continue;
      // .com.opensource.svga.ShapeEntity.ShapeArgs shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.opensource.svga.ShapeEntity.RectArgs rect = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.opensource.svga.ShapeEntity.EllipseArgs ellipse = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ellipse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.opensource.svga.ShapeEntity.ShapeStyle styles = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_styles(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.opensource.svga.Transform transform = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShapeEntity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.opensource.svga.ShapeEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.opensource.svga.ShapeEntity.ShapeType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .com.opensource.svga.ShapeEntity.ShapeArgs shape = 2;
  if (_internal_has_shape()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::shape(this), target, stream);
  }

  // .com.opensource.svga.ShapeEntity.RectArgs rect = 3;
  if (_internal_has_rect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rect(this), target, stream);
  }

  // .com.opensource.svga.ShapeEntity.EllipseArgs ellipse = 4;
  if (_internal_has_ellipse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ellipse(this), target, stream);
  }

  // .com.opensource.svga.ShapeEntity.ShapeStyle styles = 10;
  if (this->has_styles()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::styles(this), target, stream);
  }

  // .com.opensource.svga.Transform transform = 11;
  if (this->has_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::transform(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.opensource.svga.ShapeEntity)
  return target;
}

size_t ShapeEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.opensource.svga.ShapeEntity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.opensource.svga.ShapeEntity.ShapeStyle styles = 10;
  if (this->has_styles()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *styles_);
  }

  // .com.opensource.svga.Transform transform = 11;
  if (this->has_transform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transform_);
  }

  // .com.opensource.svga.ShapeEntity.ShapeType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (args_case()) {
    // .com.opensource.svga.ShapeEntity.ShapeArgs shape = 2;
    case kShape: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *args_.shape_);
      break;
    }
    // .com.opensource.svga.ShapeEntity.RectArgs rect = 3;
    case kRect: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *args_.rect_);
      break;
    }
    // .com.opensource.svga.ShapeEntity.EllipseArgs ellipse = 4;
    case kEllipse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *args_.ellipse_);
      break;
    }
    case ARGS_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShapeEntity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.opensource.svga.ShapeEntity)
  GOOGLE_DCHECK_NE(&from, this);
  const ShapeEntity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShapeEntity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.opensource.svga.ShapeEntity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.opensource.svga.ShapeEntity)
    MergeFrom(*source);
  }
}

void ShapeEntity::MergeFrom(const ShapeEntity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.opensource.svga.ShapeEntity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_styles()) {
    _internal_mutable_styles()->::com::opensource::svga::ShapeEntity_ShapeStyle::MergeFrom(from._internal_styles());
  }
  if (from.has_transform()) {
    _internal_mutable_transform()->::com::opensource::svga::Transform::MergeFrom(from._internal_transform());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  switch (from.args_case()) {
    case kShape: {
      _internal_mutable_shape()->::com::opensource::svga::ShapeEntity_ShapeArgs::MergeFrom(from._internal_shape());
      break;
    }
    case kRect: {
      _internal_mutable_rect()->::com::opensource::svga::ShapeEntity_RectArgs::MergeFrom(from._internal_rect());
      break;
    }
    case kEllipse: {
      _internal_mutable_ellipse()->::com::opensource::svga::ShapeEntity_EllipseArgs::MergeFrom(from._internal_ellipse());
      break;
    }
    case ARGS_NOT_SET: {
      break;
    }
  }
}

void ShapeEntity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.opensource.svga.ShapeEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShapeEntity::CopyFrom(const ShapeEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.opensource.svga.ShapeEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShapeEntity::IsInitialized() const {
  return true;
}

void ShapeEntity::InternalSwap(ShapeEntity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShapeEntity, type_)
      + sizeof(ShapeEntity::type_)
      - PROTOBUF_FIELD_OFFSET(ShapeEntity, styles_)>(
          reinterpret_cast<char*>(&styles_),
          reinterpret_cast<char*>(&other->styles_));
  swap(args_, other->args_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShapeEntity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FrameEntity::_Internal {
 public:
  static const ::com::opensource::svga::Layout& layout(const FrameEntity* msg);
  static const ::com::opensource::svga::Transform& transform(const FrameEntity* msg);
};

const ::com::opensource::svga::Layout&
FrameEntity::_Internal::layout(const FrameEntity* msg) {
  return *msg->layout_;
}
const ::com::opensource::svga::Transform&
FrameEntity::_Internal::transform(const FrameEntity* msg) {
  return *msg->transform_;
}
FrameEntity::FrameEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  shapes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.opensource.svga.FrameEntity)
}
FrameEntity::FrameEntity(const FrameEntity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shapes_(from.shapes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clippath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clippath().empty()) {
    clippath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clippath(), 
      GetArena());
  }
  if (from._internal_has_layout()) {
    layout_ = new ::com::opensource::svga::Layout(*from.layout_);
  } else {
    layout_ = nullptr;
  }
  if (from._internal_has_transform()) {
    transform_ = new ::com::opensource::svga::Transform(*from.transform_);
  } else {
    transform_ = nullptr;
  }
  alpha_ = from.alpha_;
  // @@protoc_insertion_point(copy_constructor:com.opensource.svga.FrameEntity)
}

void FrameEntity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FrameEntity_svga_2eproto.base);
  clippath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&layout_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&alpha_) -
      reinterpret_cast<char*>(&layout_)) + sizeof(alpha_));
}

FrameEntity::~FrameEntity() {
  // @@protoc_insertion_point(destructor:com.opensource.svga.FrameEntity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FrameEntity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clippath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete layout_;
  if (this != internal_default_instance()) delete transform_;
}

void FrameEntity::ArenaDtor(void* object) {
  FrameEntity* _this = reinterpret_cast< FrameEntity* >(object);
  (void)_this;
}
void FrameEntity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrameEntity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameEntity& FrameEntity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrameEntity_svga_2eproto.base);
  return *internal_default_instance();
}


void FrameEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:com.opensource.svga.FrameEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shapes_.Clear();
  clippath_.ClearToEmpty();
  if (GetArena() == nullptr && layout_ != nullptr) {
    delete layout_;
  }
  layout_ = nullptr;
  if (GetArena() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
  alpha_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameEntity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float alpha = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .com.opensource.svga.Layout layout = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_layout(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.opensource.svga.Transform transform = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string clipPath = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_clippath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.opensource.svga.FrameEntity.clipPath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.opensource.svga.ShapeEntity shapes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shapes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrameEntity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.opensource.svga.FrameEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float alpha = 1;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_alpha(), target);
  }

  // .com.opensource.svga.Layout layout = 2;
  if (this->has_layout()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::layout(this), target, stream);
  }

  // .com.opensource.svga.Transform transform = 3;
  if (this->has_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::transform(this), target, stream);
  }

  // string clipPath = 4;
  if (this->clippath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clippath().data(), static_cast<int>(this->_internal_clippath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.opensource.svga.FrameEntity.clipPath");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_clippath(), target);
  }

  // repeated .com.opensource.svga.ShapeEntity shapes = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shapes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_shapes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.opensource.svga.FrameEntity)
  return target;
}

size_t FrameEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.opensource.svga.FrameEntity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.opensource.svga.ShapeEntity shapes = 5;
  total_size += 1UL * this->_internal_shapes_size();
  for (const auto& msg : this->shapes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string clipPath = 4;
  if (this->clippath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clippath());
  }

  // .com.opensource.svga.Layout layout = 2;
  if (this->has_layout()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *layout_);
  }

  // .com.opensource.svga.Transform transform = 3;
  if (this->has_transform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transform_);
  }

  // float alpha = 1;
  if (!(this->alpha() <= 0 && this->alpha() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameEntity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.opensource.svga.FrameEntity)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameEntity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrameEntity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.opensource.svga.FrameEntity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.opensource.svga.FrameEntity)
    MergeFrom(*source);
  }
}

void FrameEntity::MergeFrom(const FrameEntity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.opensource.svga.FrameEntity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shapes_.MergeFrom(from.shapes_);
  if (from.clippath().size() > 0) {
    _internal_set_clippath(from._internal_clippath());
  }
  if (from.has_layout()) {
    _internal_mutable_layout()->::com::opensource::svga::Layout::MergeFrom(from._internal_layout());
  }
  if (from.has_transform()) {
    _internal_mutable_transform()->::com::opensource::svga::Transform::MergeFrom(from._internal_transform());
  }
  if (!(from.alpha() <= 0 && from.alpha() >= 0)) {
    _internal_set_alpha(from._internal_alpha());
  }
}

void FrameEntity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.opensource.svga.FrameEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameEntity::CopyFrom(const FrameEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.opensource.svga.FrameEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameEntity::IsInitialized() const {
  return true;
}

void FrameEntity::InternalSwap(FrameEntity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  shapes_.InternalSwap(&other->shapes_);
  clippath_.Swap(&other->clippath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameEntity, alpha_)
      + sizeof(FrameEntity::alpha_)
      - PROTOBUF_FIELD_OFFSET(FrameEntity, layout_)>(
          reinterpret_cast<char*>(&layout_),
          reinterpret_cast<char*>(&other->layout_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameEntity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

MovieEntity_ImagesEntry_DoNotUse::MovieEntity_ImagesEntry_DoNotUse() {}
MovieEntity_ImagesEntry_DoNotUse::MovieEntity_ImagesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MovieEntity_ImagesEntry_DoNotUse::MergeFrom(const MovieEntity_ImagesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MovieEntity_ImagesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void MovieEntity_ImagesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class MovieEntity::_Internal {
 public:
  static const ::com::opensource::svga::MovieParams& params(const MovieEntity* msg);
};

const ::com::opensource::svga::MovieParams&
MovieEntity::_Internal::params(const MovieEntity* msg) {
  return *msg->params_;
}
MovieEntity::MovieEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  images_(arena),
  sprites_(arena),
  audios_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.opensource.svga.MovieEntity)
}
MovieEntity::MovieEntity(const MovieEntity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sprites_(from.sprites_),
      audios_(from.audios_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  images_.MergeFrom(from.images_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArena());
  }
  if (from._internal_has_params()) {
    params_ = new ::com::opensource::svga::MovieParams(*from.params_);
  } else {
    params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.opensource.svga.MovieEntity)
}

void MovieEntity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MovieEntity_svga_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  params_ = nullptr;
}

MovieEntity::~MovieEntity() {
  // @@protoc_insertion_point(destructor:com.opensource.svga.MovieEntity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MovieEntity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete params_;
}

void MovieEntity::ArenaDtor(void* object) {
  MovieEntity* _this = reinterpret_cast< MovieEntity* >(object);
  (void)_this;
}
void MovieEntity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MovieEntity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MovieEntity& MovieEntity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MovieEntity_svga_2eproto.base);
  return *internal_default_instance();
}


void MovieEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:com.opensource.svga.MovieEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  images_.Clear();
  sprites_.Clear();
  audios_.Clear();
  version_.ClearToEmpty();
  if (GetArena() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MovieEntity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.opensource.svga.MovieEntity.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.opensource.svga.MovieParams params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, bytes> images = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&images_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .com.opensource.svga.SpriteEntity sprites = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sprites(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .com.opensource.svga.AudioEntity audios = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_audios(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MovieEntity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.opensource.svga.MovieEntity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.opensource.svga.MovieEntity.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // .com.opensource.svga.MovieParams params = 2;
  if (this->has_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::params(this), target, stream);
  }

  // map<string, bytes> images = 3;
  if (!this->_internal_images().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "com.opensource.svga.MovieEntity.ImagesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_images().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_images().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_images().begin();
          it != this->_internal_images().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MovieEntity_ImagesEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_images().begin();
          it != this->_internal_images().end(); ++it) {
        target = MovieEntity_ImagesEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .com.opensource.svga.SpriteEntity sprites = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sprites_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_sprites(i), target, stream);
  }

  // repeated .com.opensource.svga.AudioEntity audios = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_audios_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_audios(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.opensource.svga.MovieEntity)
  return target;
}

size_t MovieEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.opensource.svga.MovieEntity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> images = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_images_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_images().begin();
      it != this->_internal_images().end(); ++it) {
    total_size += MovieEntity_ImagesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .com.opensource.svga.SpriteEntity sprites = 4;
  total_size += 1UL * this->_internal_sprites_size();
  for (const auto& msg : this->sprites_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.opensource.svga.AudioEntity audios = 5;
  total_size += 1UL * this->_internal_audios_size();
  for (const auto& msg : this->audios_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // .com.opensource.svga.MovieParams params = 2;
  if (this->has_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *params_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MovieEntity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.opensource.svga.MovieEntity)
  GOOGLE_DCHECK_NE(&from, this);
  const MovieEntity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MovieEntity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.opensource.svga.MovieEntity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.opensource.svga.MovieEntity)
    MergeFrom(*source);
  }
}

void MovieEntity::MergeFrom(const MovieEntity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.opensource.svga.MovieEntity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  images_.MergeFrom(from.images_);
  sprites_.MergeFrom(from.sprites_);
  audios_.MergeFrom(from.audios_);
  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.has_params()) {
    _internal_mutable_params()->::com::opensource::svga::MovieParams::MergeFrom(from._internal_params());
  }
}

void MovieEntity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.opensource.svga.MovieEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MovieEntity::CopyFrom(const MovieEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.opensource.svga.MovieEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovieEntity::IsInitialized() const {
  return true;
}

void MovieEntity::InternalSwap(MovieEntity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  images_.Swap(&other->images_);
  sprites_.InternalSwap(&other->sprites_);
  audios_.InternalSwap(&other->audios_);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(params_, other->params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MovieEntity::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace svga
}  // namespace opensource
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::opensource::svga::MovieParams* Arena::CreateMaybeMessage< ::com::opensource::svga::MovieParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::opensource::svga::MovieParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::opensource::svga::SpriteEntity* Arena::CreateMaybeMessage< ::com::opensource::svga::SpriteEntity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::opensource::svga::SpriteEntity >(arena);
}
template<> PROTOBUF_NOINLINE ::com::opensource::svga::AudioEntity* Arena::CreateMaybeMessage< ::com::opensource::svga::AudioEntity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::opensource::svga::AudioEntity >(arena);
}
template<> PROTOBUF_NOINLINE ::com::opensource::svga::Layout* Arena::CreateMaybeMessage< ::com::opensource::svga::Layout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::opensource::svga::Layout >(arena);
}
template<> PROTOBUF_NOINLINE ::com::opensource::svga::Transform* Arena::CreateMaybeMessage< ::com::opensource::svga::Transform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::opensource::svga::Transform >(arena);
}
template<> PROTOBUF_NOINLINE ::com::opensource::svga::ShapeEntity_ShapeArgs* Arena::CreateMaybeMessage< ::com::opensource::svga::ShapeEntity_ShapeArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::opensource::svga::ShapeEntity_ShapeArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::com::opensource::svga::ShapeEntity_RectArgs* Arena::CreateMaybeMessage< ::com::opensource::svga::ShapeEntity_RectArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::opensource::svga::ShapeEntity_RectArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::com::opensource::svga::ShapeEntity_EllipseArgs* Arena::CreateMaybeMessage< ::com::opensource::svga::ShapeEntity_EllipseArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::opensource::svga::ShapeEntity_EllipseArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::com::opensource::svga::ShapeEntity_ShapeStyle_RGBAColor* Arena::CreateMaybeMessage< ::com::opensource::svga::ShapeEntity_ShapeStyle_RGBAColor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::opensource::svga::ShapeEntity_ShapeStyle_RGBAColor >(arena);
}
template<> PROTOBUF_NOINLINE ::com::opensource::svga::ShapeEntity_ShapeStyle* Arena::CreateMaybeMessage< ::com::opensource::svga::ShapeEntity_ShapeStyle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::opensource::svga::ShapeEntity_ShapeStyle >(arena);
}
template<> PROTOBUF_NOINLINE ::com::opensource::svga::ShapeEntity* Arena::CreateMaybeMessage< ::com::opensource::svga::ShapeEntity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::opensource::svga::ShapeEntity >(arena);
}
template<> PROTOBUF_NOINLINE ::com::opensource::svga::FrameEntity* Arena::CreateMaybeMessage< ::com::opensource::svga::FrameEntity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::opensource::svga::FrameEntity >(arena);
}
template<> PROTOBUF_NOINLINE ::com::opensource::svga::MovieEntity_ImagesEntry_DoNotUse* Arena::CreateMaybeMessage< ::com::opensource::svga::MovieEntity_ImagesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::opensource::svga::MovieEntity_ImagesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::opensource::svga::MovieEntity* Arena::CreateMaybeMessage< ::com::opensource::svga::MovieEntity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::opensource::svga::MovieEntity >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
